---
substitutions:
  device_name: P1-Verwarming
  friendly_name: P1 Verwarming
  device_description: "ESPHome config for P1 heating measurements (Warmtelink / Stadsverwarming / Stadswarmte)"
  version: '1.0'

  project:
    name: Dutch DIY smart home things - P1 Verwarming
    version: "${version}"

esphome:
  includes:
  - uart_read_line_sensor.h
  name: '${device_name}'
  platform: ESP8266
  board: d1_mini

# Enable Home Assistant API
api:

ota:
  #password: "SomeOtaPassword"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${device_name}'
    password: 'espsetup'

logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

switch:
  - platform: restart
    id: switch_restart
    name: "${friendly_name} Restart"

uart:
  id: uart_bus
  rx_pin: RX
  baud_rate: 115200

sensor:
  - platform: template
    id: text_sensor_P1_verwarming_version
    name: "${friendly_name} Version"
    update_interval: 5h
    lambda: |-
      return {"${version}"};

text_sensor:
- platform: custom
  lambda: |-
    auto uartLine = new UartReadLineSensor(id(uart_bus));
    App.register_component(uartLine);

    return {uartLine};
  text_sensors:
    id: "uartLine"

- platform: template
  name: "timestamp"
  update_interval: 10s
  lambda: |-
    String str = String(id(uartLine).state.c_str());
    return {str.substring(11, 23).c_str()};

- platform: template
  name: "GJ"
  update_interval: 10s
  lambda: |-
    String str = String(id(uartLine).state.c_str());
    return {str.substring(26, 32).c_str()};